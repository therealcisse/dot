#
# Command aliases
#

# Reload/edit zsh configuration
alias rz='source ~/.zshrc'
alias ze='nvim ~/.zshrc'
alias za='nvim ~/.zsh/aliases'
alias zf='nvim ~/.zsh/functions'

# My root and user bashrc files are linked to be the same.  This makes sure that the
# root rm / cp / mv commands are prompting.
if [[ $(id -u) -eq 0 ]]; then
    alias rm='rm -i'
    alias cp='cp -i'
    alias mv='mv -i'
fi

# zsh awesomeness
autoload -U zmv
alias mmv='noglob zmv -W'

alias ....='cd ../..'
alias :e=nvim
alias :qa=exit
alias :sp='test -n "$TMUX" && tmux split-window'
alias :vs='test -n "$TMUX" && tmux split-window -h'
alias :wq=exit
alias cd..='cd ..'
alias cdtmp='cd $(mktemp -d $TMPDIR/$USER-cdtmp-XXXXXX)'
alias d='hash -d'
alias e=exit
alias groot='cd $(git rev-parse --show-toplevel 2> /dev/null || echo -n ".")'
alias clip="nc localhost 8377"
alias d='hash -d'
alias h=history
alias j=jump
alias l='ls -F'
alias ll='ls -lahF'
alias t=tmux
alias v=nvim
alias prettyjson='python -m json.tool'
alias trash=rm

if command -v nvim &> /dev/null; then
  alias vim=nvim # Use `\vim` or `command vim` to get the real vim.
fi

alias la=tree
alias cat=bat

# Git
alias gc="git commit -m"
alias gca="git commit -a -m"
alias gp="git push origin HEAD"
alias gpu="git pull origin"
alias gst="git status"
alias glog="git log --graph --topo-order --pretty='%w(100,0,6)%C(yellow)%h%C(bold)%C(black)%d %C(cyan)%ar %C(green)%an%n%C(bold)%C(white)%s %N' --abbrev-commit"
alias gdiff="git diff"
alias gco="git checkout"
alias gb='git branch'
alias gba='git branch -a'
alias gadd='git add'
alias ga='git add -p'
alias gcoall='git checkout -- .'
alias gr='git remote'
alias gre='git reset'

# Docker
alias dco="docker compose"
alias dps="docker ps"
alias dpa="docker ps -a"
alias dl="docker ps -l -q"
alias dx="docker exec -it"

alias cl='clear'

# K8S
export KUBECONFIG=~/.kube/config
alias k="kubectl"
alias ka="kubectl apply -f"
alias kg="kubectl get"
alias kd="kubectl describe"
alias kdel="kubectl delete"
alias kl="kubectl logs"
alias kgpo="kubectl get pod"
alias kgd="kubectl get deployments"
alias kc="kubectx"
alias kns="kubens"
alias kl="kubectl logs -f"
alias ke="kubectl exec -it"
alias kcns='kubectl config set-context --current --namespace'
alias podname=''

alias -s md=glow

# HTTP requests with xh!
alias http="xh"

# Eza
alias l="eza -l --icons --git -a"
alias lt="eza --tree --level=2 --long --icons --git"
alias ltree="eza --tree --level=2  --icons --git"

# SEC STUFF
alias gobust='gobuster dir --wordlist ~/security/wordlists/diccnoext.txt --wildcard --url'
alias dirsearch='python dirsearch.py -w db/dicc.txt -b -u'
alias massdns='~/hacking/tools/massdns/bin/massdns -r ~/hacking/tools/massdns/lists/resolvers.txt -t A -o S bf-targets.txt -w livehosts.txt -s 4000'
alias server='python -m http.server 4445'
alias tunnel='ngrok http 4445'
alias fuzz='ffuf -w ~/hacking/SecLists/content_discovery_all.txt -mc all -u'
alias gr='~/go/src/github.com/tomnomnom/gf/gf'

#
# Global aliases
# (work at any position within the command line)
#

# Mnemonic: "[C]lip"
alias -g C="|clip"
#
# Mnemonic: "[D]lip"
alias -g D="|delta"

# Pretty-print JSON.
# Mnemonic: "[J]SON"
alias -g J="|python -m json.tool"

alias chrome='open -n -a Google\ Chrome --args --user-data-dir="/tmp/chrome-`uuidgen`"'
alias chrome-canary='open -n -a Google\ Chrome\ Canary --args --user-data-dir="/tmp/chrome-`uuidgen`"'

# Simple Static Server (for current directory), stolen from paulirish/dotfiles
function server() {
  local port="${1:-8080}"
  open "http://localhost:${port}/" &
  # statik is good because it won't expose hidden folders/files by default.
  # npm install -g statik
  statik --port "$port" .
}
alias serve=server

# SBT debug
function sbt-debug() {
  local port="${1:-5005}"
  JAVA_OPTS="-Xms2G -Xmx180G -agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=${port}" sbt
}
alias sbt-debug=sbt-debug

# tail
alias tf='tail -F'

extract_archive () {
  local old_dirs current_dirs lower
  lower=${(L)1}
  old_dirs=( *(N/) )
  if [[ $lower == *.tar.gz || $lower == *.tgz ]]; then
    tar zxfv $1
  elif [[ $lower == *.gz ]]; then
    gunzip $1
  elif [[ $lower == *.tar.bz2 || $lower == *.tbz ]]; then
    bunzip2 -c $1 | tar xfv -
  elif [[ $lower == *.tar.xz || $lower == *.txz ]]; then
    xz -d -c $1 | tar xfv -
  elif [[ $lower == *.bz2 ]]; then
    bunzip2 $1
  elif [[ $lower == *.zip ]]; then
    unzip $1
  elif [[ $lower == *.rar ]]; then
    unrar e $1
  elif [[ $lower == *.tar ]]; then
    tar xfv $1
  elif [[ $lower == *.lha ]]; then
    lha e $1
  elif [[ $lower == *.xz ]]; then
    xz -d $1
  elif [[ $lower == *.z || $lower == *.7z ]]; then
    7z x $1
  else
    print "Unknown archive type: $1"
    return 1
  fi
  # Change in to the newly created directory, and
  # list the directory contents, if there is one.
  current_dirs=( *(N/) )
  for i in {1..${#current_dirs}}; do
    if [[ $current_dirs[$i] != $old_dirs[$i] ]]; then
      cd $current_dirs[$i]
      ls
      break
    fi
  done
}
alias ex=extract_archive
compdef '_files -g "*.gz *.tgz *.bz2 *.tbz *.zip *.rar *.tar *.lha *.xz *.txz *.7z *.z"' extract_archive

# processes
alias psg='ps ax | grep -v grep | grep '
alias psga='ps ax | grep '

# Give us a root shell, or run the command with sudo.
# Expands command aliases first (cool!)
smart_sudo () {
  if [[ -n $1 ]]; then
    #test if the first parameter is a alias
    if [[ -n $aliases[$1] ]]; then
      #if so, substitute the real command
      sudo ${=aliases[$1]} $argv[2,-1]
    else
      #else just run sudo as is
      sudo $argv
    fi
  else
    #if no parameters were given, then assume we want a root shell
    sudo -s
  fi
}

alias s=smart_sudo
compdef _sudo smart_sudo

git_reset_head () {
  if [[ -n $1 ]]; then
    git reset HEAD~$1
  else
    git reset HEAD
  fi
}
alias grh=git_reset_head

git_reset_head_hard () {
  if [[ -n $1 ]]; then
    git reset --hard HEAD~$1
  else
    git reset --hard HEAD
  fi
}
alias grhh=git_reset_head_hard

git_checkout_head () {
    if [[ -n $1 ]]; then
        git checkout HEAD~$1
    else
        git checkout HEAD
    fi
}
alias gch=git_checkout_head

#
# Global aliases
# (work at any position within the command line)
#

# Mnemonic: "[G]rep"
alias -g G="|grep"

# Mnemonic: "[L]ess"
alias -g L="|less"

# Capture out of piped in lines: !! |K
K () {
  lines=("${(f@)$(cat)}")
}

# Mnemonic: "[R]eset"
alias -g R=";clear;test -n "$TMUX" && tmux clear-history;"

# Auto-activate virtualenv when entering a directory with venv
function auto_activate_virtualenv() {
  if [ -e "venv/bin/activate" ]; then
    # Only activate if not already activated
    if [[ "$VIRTUAL_ENV" != "$(pwd)/venv" ]]; then
      echo "Activating virtualenv in $(pwd)"
      source venv/bin/activate
    fi
  fi
}

# Hook this into the `cd` command
function cd() {
  builtin cd "$@" && auto_activate_virtualenv
}

function ranger {
	local IFS=$'\t\n'
	local tempfile="$(mktemp -t tmp.XXXXXX)"
	local ranger_cmd=(
		command
		ranger
		--cmd="map Q chain shell echo %d > "$tempfile"; quitall"
	)

	${ranger_cmd[@]} "$@"
	if [[ -f "$tempfile" ]] && [[ "$(cat -- "$tempfile")" != "$(echo -n `pwd`)" ]]; then
		cd -- "$(cat "$tempfile")" || return
	fi
	command rm -f -- "$tempfile" 2>/dev/null
}
alias rr='ranger'

# navigation
cx() { cd "$@" && l; }
fcd() { cd "$(find . -type d -not -path '*/.*' | fzf)" && l; }
f() { echo "$(find . -type f -not -path '*/.*' | fzf)" | pbcopy }
fv() { nvim "$(find . -type f -not -path '*/.*' | fzf)" }
